///////////////////////////////////////////////////////////////////////
// Copyright (C) 1999  Washington State Department of Transportation
//                     Bridge and Structures Office
//
// This library was developed as part of the Alternate Route Project
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the Alternate Route Library Open Source License as published by 
// the Washington State Department of Transportation, Bridge and Structures Office.
//
// This program is distributed in the hope that it will be useful, but is distributed 
// AS IS, WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
// or FITNESS FOR A PARTICULAR PURPOSE. See the Alternate Route Library Open Source 
// License for more details.
//
// You should have received a copy of the Alternate Route Library Open Source License 
// along with this program; if not, write to the Washington State Department of 
// Transportation, Bridge and Structures Office, 4500 3rd Ave SE - P.O. Box  47340, 
// Olympia, WA 98503, USA or e-mail Bridge_Support@wsdot.wa.gov
///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////
// Revision Log
// ============
// May 1997 - Created, Richard Brice, PE
// Oct 1999 - Released as Open Source

#include <fem2d\femmodel.h>
#include <shape\shape.h>
#include <checks.h>
#include <iostream.h>
#include <fstream.h>
#include <iomanip.h>

#if !defined(CLASSLIB_TIME_H)
#include <classlib\time.h>
#endif

void FemModel::GTStrudl(const char *fname)
{
   ofstream ofile(fname);
   TTime now;

   ofile << "$ GTStrudl Model Generated by FEM2D structural analysis library." << endl;
   ofile << "$ Written by Richard A. Brice - WSDOT Bridge and Structures Office." << endl;
   ofile << "$ " << now << endl;
   ofile << "$" << endl;
   ofile << "STRUDL" << endl;
   ofile << "$" << endl;
   ofile << "UNITS NEWTON METER" << endl;
   ofile << "$" << endl;
   JointCoordinates(ofile);
   ofile << "$" << endl;
   JointReleases(ofile);
   ofile << "$" << endl;
   MemberIncidences(ofile);
   ofile << "$" << endl;
   MemberReleases(ofile);
   ofile << "$" << endl;
   Constants(ofile);
   ofile << "$" << endl;
   MbrProperties(ofile);
   ofile << "$" << endl;
   Loads(ofile);
   ofile << "$" << endl;
   ofile << "STIFFNESS ANALYSIS" << endl;
   ofile << "$" << endl;
   Combinations(ofile);
   ofile << "$" << endl;
   Results(ofile);
}

void FemModel::JointCoordinates(ofstream &ofile)
{
   JointIterator i(*joints);

   ofile << "JOINT COORDINATES" << endl;

   while (i)
      {
      Joint *jnt = i++;
      ofile << jnt << endl;
      }
}


void FemModel::JointReleases(ofstream &ofile)
{
   JointIterator i(*joints);

   ofile << "JOINT RELEASES" << endl;

   while (i)
      {
      Joint *jnt = i++;

      // If the joint is a support it may have releases
      if (jnt->IsSupport())
         {
         bool dof1,dof2,dof3;

         // Get release state for all three dof
         dof1 = jnt->IsReleased(jntRelFx);
         dof2 = jnt->IsReleased(jntRelFy);
         dof3 = jnt->IsReleased(jntRelMz);

         // if one of the dof's is released, then write strudl command
         if (dof1 || dof2 || dof3)
            {
            ofile << jnt->GetID();
            if (dof1)
               ofile << " FORCE X";
            if (dof2)
               ofile << " FORCE Y";
            if (dof3)
               ofile << " MOMENT Z";

            ofile << endl;
            }
         }
      }
}


void FemModel::MemberIncidences(ofstream &ofile)
{
   ElementIterator i(*elements);

   ofile << "TYPE PLANE FRAME" << endl;
   ofile << "MEMBER INCIDENCES" << endl;

   while (i)
      {
      PlnFrameMbr *mbr = i++;
      ofile << mbr->GetID()      << " "
            << mbr->GetJoint(0)->GetID() << " "
            << mbr->GetJoint(1)->GetID()   << endl;
      }
}


void FemModel::MemberReleases(ofstream &ofile)
{
   ElementIterator i(*elements);

   while (i)
      {
      PlnFrameMbr *mbr = i++;

      // if either the start or end is released, write strudl command
      if (mbr->IsReleased(mbrStart,mbrRelMz) || mbr->IsReleased(mbrEnd,mbrRelMz))
         {
         ofile << "MEMBER " << mbr->GetID();
         if (mbr->IsReleased(mbrStart,mbrRelMz))
            ofile << " RELEASE START MOMENT Z";
         if (mbr->IsReleased(mbrEnd,mbrRelMz))
            ofile << " RELEASE END MOMENT Z";

         ofile << endl;
         }
      }
}


void FemModel::Constants(ofstream &ofile)
{
   ElementIterator i(*elements);

   while (i)
      {
      PlnFrameMbr *mbr = i++;
      TShape* shape = mbr->GetSection();

      ofile << "CONSTANTS" << endl
            << setiosflags(ios::showpoint | ios::scientific)
            << "E   " << shape->GetModE() << " " << mbr->GetID() << endl
            << "DEN " << shape->GetUnitWeight() << " " << mbr->GetID() << endl;
      ofile << "$" << endl;
      }
}


void FemModel::MbrProperties(ofstream &ofile)
{
   ElementIterator i(*elements);

   while (i)
      {
      PlnFrameMbr *mbr = i++;
      TShape* sp = mbr->GetSection();

      ofile << "MEMBER PROPERTIES PRISMATIC" << endl;
      ofile << mbr->GetID() << setiosflags(ios::showpoint | ios::scientific)
                            << " AX " << sp->GetArea()
                            << " IZ " << sp->GetCentroidalInertia().Ixx << endl;
      ofile << "$" << endl;
      }
}

void FemModel::Loads(ofstream &ofile)
{
   LoadingIterator i(*loadings);

   while (i)
      {
      Loading *loading = i++;
      ofile << (*loading) << endl;
      }
}

void FemModel::Combinations(ofstream &ofile)
{
   CombinationIterator i(*combos);

   while(i)
      {
      LoadingCombo *combo = i++;
      ofile << (*combo) << endl;
      }
}

void FemModel::Results(ofstream &ofile)
{
   ofile << "LIST DISPLACEMENTS ALL JOINTS" << endl;
   ofile << "LIST REACTIONS" << endl;
   ofile << "LIST FORCES ALL MEMBERS" << endl;
}
